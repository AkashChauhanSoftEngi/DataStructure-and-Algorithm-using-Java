package champalways;

import java.math.BigInteger;

public class Exe4 {
	static BigInteger sum = BigInteger.ZERO;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(allPossiCombi(BigInteger.valueOf(610)));

	}

	public static BigInteger allPossiCombi(BigInteger s) {
		// @ s: Expected sum
		int b, c, d;
		double l;
		// @ k: how many steps/rolls
		for (int k = 1; k <= s.intValue(); k++) {
			l = Math.floor((s.intValue() - k) / 6);
			BigInteger sum2 = BigInteger.ZERO;
			for (int i = 0; i <= l; i++) {
				b = (s.intValue() - 6 * i - 1);
				c = (s.intValue() - 6 * i - k);
				d = (int) Math.pow(-1, i);
				/*
				 * Standard mathematics formula to to calculate possible
				 * combinations
				 */
				BigInteger A = BigInteger.ONE;
				BigInteger B = BigInteger.ONE;

				A = (BigInteger.valueOf(d)).multiply(fct(BigInteger.valueOf(k)));
				A = A.multiply(fct(BigInteger.valueOf(b)));

				B = fct(BigInteger.valueOf(i)).multiply(fct(BigInteger.valueOf(k - i)));
				B = B.multiply(fct(BigInteger.valueOf(c)));
				B = B.multiply(fct(BigInteger.valueOf(k - 1)));

				sum2 = sum2.add(A.divide(B));
			}
			sum = sum.add(sum2);
		}
		return sum;
	}

	// @For calculating Factorial of a number
	public static BigInteger fct(BigInteger n) {
		BigInteger fact = BigInteger.ONE;
		for (BigInteger i = BigInteger.ONE; i.compareTo(n) <= 0; i = i.add(BigInteger.ONE)) {
			fact = fact.multiply(i);
		}

		return fact;
	}

}
